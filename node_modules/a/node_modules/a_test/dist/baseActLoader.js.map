{"version":3,"sources":["../src/baseActLoader.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEqB,a;AACjB,6BAEqB;AAAA,YAFT,YAES,yDAFM,4BAEN;AAAA,YADjB,UACiB,yDADJ,0BACI;AAAA,YAAjB,IAAiB;;AAAA;;AACjB,aAAK,aAAL,GAAqB,YAArB;AACA,aAAK,WAAL,GAAmB,UAAnB;AACA,aAAK,KAAL,GAAa,IAAb;AACH;;;;qCAEY,O,EAAS,e,EAAiB;AACnC,gBAAI,qBAAqB,OAArB,yCAAqB,OAArB,CAAJ;AACA,gBAAI,gBAAgB,UAApB,EAAgC;AAC5B,uBAAO,OAAP;AAEH,aAHD,MAGO,IAAI,gBAAgB,QAApB,EAA8B;;AAEjC,oBAAI,WAAW,KAAK,KAAL,CAAW,IAA1B;oBACI,UAAU,KAAK,KAAL,CAAW,OADzB;;AAGA,oBAAI,cAAc,SAAS,QAAQ,eAAR,CAAT,EAAmC,OAAnC,CAAlB;;AAEA,uBAAO,KAAK,aAAL,CAAmB,IAAnB,CAAwB,WAAxB,CAAP;AAEH,aATM,MASA;;AAEH,oBAAI,eAAc,KAAK,WAAL,CAAiB,gBAAjB,CAAkC,eAAlC,CAAlB;;AAEA,uBAAO,KAAK,aAAL,CAAmB,IAAnB,CAAwB,YAAxB,CAAP;AACH;AACJ;;;mCAGU,G,EAAK;AACZ,gBAAI,IAAI,IAAR,EAAc;AACV,oBAAI,WAAW,KAAK,KAAL,CAAW,IAA1B;oBACI,UAAU,KAAK,KAAL,CAAW,OADzB;;AAGA,oBAAI,cAAc,SAAS,QAAQ,IAAI,IAAZ,CAAT,EAA4B,IAAI,IAAhC,CAAlB;;AAEA,uBAAO,KAAK,aAAL,CAAmB,IAAnB,CAAwB,WAAxB,CAAP;AAEH,aARD,MAQO,IAAI,CAAC,KAAK,mBAAL,CAAyB,GAAzB,CAAL,EAAoC;AACvC,uBAAO,SAAP;AACH,aAFM,MAEA;AACH,oBAAI,gBAAc,KAAK,WAAL,CAAiB,cAAjB,CAAgC,IAAI,IAApC,CAAlB;AACA,oBAAI,aAAJ,E;AACI,2BAAO,KAAK,aAAL,CAAmB,IAAnB,CAAwB,aAAxB,CAAP;AACP;AACJ;;;4CAEmB,G,EAAK;AACrB,mBAAO,CAAC,CAAC,IAAI,IAAb;AACH;;;;;;kBApDgB,a","file":"baseActLoader.js","sourcesContent":["import ModuleLoader from './moduleLoader';\nimport Convention from './convention';\nimport realPath from 'path';\n\nexport default class BaseActLoader {\n    constructor(moduleLoader = new ModuleLoader(),\n        convention = new Convention(),\n        path = realPath) {\n        this._moduleLoader = moduleLoader;\n        this._convention = convention;\n        this._path = path;\n    }\n\n    loadForSuite(lastAct, suiteModulePath) {\n        let lastActType = typeof lastAct;\n        if (lastActType === 'function') {\n            return lastAct;\n\n        } else if (lastActType === 'string') {\n\n            let joinPath = this._path.join,\n                dirname = this._path.dirname;\n\n            let baseActPath = joinPath(dirname(suiteModulePath), lastAct);\n\n            return this._moduleLoader.load(baseActPath);\n\n        } else {\n\n            let baseActPath = this._convention.getSuiteBasePath(suiteModulePath);\n\n            return this._moduleLoader.load(baseActPath);\n        }\n    }\n\n\n    loadForAct(act) {\n        if (act.base) {\n            let joinPath = this._path.join,\n                dirname = this._path.dirname;\n\n            let baseActPath = joinPath(dirname(act.path), act.base);\n\n            return this._moduleLoader.load(baseActPath);\n\n        } else if (!this._isDefinedInOwnFile(act)) {\n            return undefined;\n        } else {\n            let baseActPath = this._convention.getActBasePath(act.path);\n            if (baseActPath) //FIXME not tested\n                return this._moduleLoader.load(baseActPath);\n        }\n    }\n\n    _isDefinedInOwnFile(act) {\n        return !!act.path;\n    }\n}\n"]}