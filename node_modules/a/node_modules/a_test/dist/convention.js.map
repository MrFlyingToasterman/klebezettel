{"version":3,"sources":["../src/convention.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEqB,U;AAEjB,0BAAuC;AAAA,YAA3B,QAA2B,yDAAhB,wBAAgB;;AAAA;;AACnC,aAAK,SAAL,GAAiB,QAAjB;AACH;;;;yCAEgB,e,EAAiB;AAC9B,gBAAI,eAAe,eAAK,OAAL,CAAa,eAAb,CAAnB;gBACI,kBAAkB,qBAAW,oBAAX,CAAgC,eAAhC,CADtB;;AAGA,gBAAI,mBAAmB,eAAK,IAAL,CAAU,YAAV,EAAwB,eAAxB,CAAvB;AACA,gBAAI,KAAK,SAAL,CAAe,MAAf,CAAsB,gBAAtB,CAAJ,EAA6C;AACzC,uBAAO,gBAAP;AACH;;AAED,mBAAO,KAAK,0BAAL,CAAgC,eAAhC,CAAP;AACH;;;uCAIc,O,EAAS;AACpB,mBAAO,KAAK,0BAAL,CAAgC,OAAhC,CAAP;AACH;;;mDAE0B,U,EAAY;AACnC,gBAAI,eAAe,KAAK,SAAL,CAAe,eAAf,CAA+B,UAA/B,CAAnB;AADmC;AAAA;AAAA;;AAAA;AAEnC,qCAAgB,YAAhB,8HAA8B;AAAA,wBAArB,GAAqB;;AAC1B,wBAAI,qBAAW,WAAX,CAAuB,GAAvB,CAAJ,EACI;;AAEJ,wBAAI,gBAAgB,KAAK,8BAAL,CAAoC,GAApC,CAApB;AACA,wBAAI,aAAJ,EACI,OAAO,aAAP;;AAEJ,oCAAgB,KAAK,sBAAL,CAA4B,GAA5B,CAAhB;AACA,wBAAI,aAAJ,EACI,OAAO,aAAP;AACP;AAbkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AActC;;;uDAE8B,G,EAAK;AAChC,gBAAI,gBAAmB,GAAnB,QAAJ;AACA,gBAAI,KAAK,SAAL,CAAe,MAAf,CAAsB,aAAtB,CAAJ,EAA0C;AACtC,uBAAO,aAAP;AACH;AACJ;;;+CAEsB,G,EAAK;AACxB,gBAAI,YAAY,eAAK,OAAL,CAAa,eAAK,IAAL,CAAU,GAAV,EAAe,IAAf,CAAb,CAAhB;AACA,gBAAI,YAAY,KAAK,SAAL,CAAe,aAAf,CAA6B,SAA7B,CAAhB;;AAEA,gBAAI,oBAAoB,qBAAW,oBAAX,CAAgC,SAAhC,CAAxB;AACA,gBAAI,iBAAJ,EAAuB;AACnB,uBAAO,eAAK,IAAL,CAAU,SAAV,EAAqB,iBAArB,CAAP;AACH;AAEJ;;;;;;kBAxDgB,U","file":"convention.js","sourcesContent":["import FsHelper from './fsHelper';\nimport path from 'path';\nimport nameHelper from './nameHelper';\n\nexport default class Convention {\n\n    constructor(fsHelper = new FsHelper()) {\n        this._fsHelper = fsHelper;\n    }\n\n    getSuiteBasePath(suiteModulePath) {\n        let suiteDirname = path.dirname(suiteModulePath),\n            baseActFilename = nameHelper.getSuiteBaseFilename(suiteModulePath);\n\n        let baseActInSameDir = path.join(suiteDirname, baseActFilename);\n        if (this._fsHelper.exists(baseActInSameDir)) {\n            return baseActInSameDir;\n        }\n\n        return this._tryGetFromParentHierarchy(suiteModulePath);\n    }\n\n\n\n    getActBasePath(actPath) {\n        return this._tryGetFromParentHierarchy(actPath);\n    }\n\n    _tryGetFromParentHierarchy(modulePath) {\n        let relevantDirs = this._fsHelper.getRelevantDirs(modulePath);\n        for (let dir of relevantDirs) {\n            if (nameHelper.isTopFolder(dir))\n                continue;\n\n            let candidatePath = this._tryGetByNameMatchingParentDir(dir);\n            if (candidatePath)\n                return candidatePath;\n\n            candidatePath = this._tryGetLoneActInParent(dir);\n            if (candidatePath)\n                return candidatePath;\n        }\n    }\n\n    _tryGetByNameMatchingParentDir(dir) {\n        let candidatePath = `${dir}.js`;\n        if (this._fsHelper.exists(candidatePath)) {\n            return candidatePath;\n        }\n    }\n\n    _tryGetLoneActInParent(dir) {\n        let parentDir = path.resolve(path.join(dir, '..'));\n        let filenames = this._fsHelper.getFilesInDir(parentDir);\n\n        let candidateFilename = nameHelper.getSingleActFilename(filenames);\n        if (candidateFilename) {\n            return path.join(parentDir, candidateFilename);\n        }\n\n    }\n}"]}