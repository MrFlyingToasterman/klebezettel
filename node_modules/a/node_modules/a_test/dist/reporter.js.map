{"version":3,"sources":["../src/reporter.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;IACM,K,0BAAA,K;IAAO,M,0BAAA,M;IAAQ,G,0BAAA,G;;AACrB,IAAI,KAAK,QAAQ,GAAjB;;IAEqB,Q;;;;;;;sCAEI;AAAA,2BACC,OADD;AAAA,gBACX,OADW,YACX,OADW;;AAEjB,oBAAQ,QAAR,GAAmB,QAAQ,MAAR,GAAiB,QAAQ,YAAzB,GAAwC,QAAQ,iBAAnE;AACH;;;iDAE+B;AAC5B,gBAAI,QAAQ,OAAZ,EACI;AACJ,oBAAQ,OAAR,GAAkB;AACd,wBAAQ,CADM;AAEd,wBAAQ,CAFM;AAGd,wBAAQ,CAHM;AAId,mCAAmB,CAJL;AAKd,8BAAc,CALA;AAMd,0BAAU;AANI,aAAlB;AAQH;;;2BAES,Q,EAAU;AAChB,eAAG,eAAa,QAAb,CAAH;AACA,oBAAQ,OAAR,CAAgB,MAAhB;AACH;;;6BAEW,O,EAAS;AACjB,eAAG,cAAY,OAAZ,CAAH;AACH;;;6BAEW,Q,EAAwB;AAAA,8CAAX,SAAW;AAAX,yBAAW;AAAA;;AAEhC,gBAAI,eAAe,cAAY,QAAZ,CAAnB;gBACI,aAAa,UAAU,GAAV,CAAc,gBAAQ;AAC/B,oCAAkB,IAAlB;AACH,aAFY,EAGZ,IAHY,CAGP,IAHO,CADjB;AAKA,eAAG,YAAH;AACA,eAAG,UAAH;;AAEA,gBAAI,iBAAiB,EAArB;AACA,qCAAuB,QAAQ,OAAR,CAAgB,aAAvC;AACA,qCAAuB,YAAvB;AACA,qCAAuB,UAAvB;AACA;;AAEA,oBAAQ,OAAR,CAAgB,QAAhB,CAAyB,IAAzB,CAA8B,cAA9B;AACA,oBAAQ,OAAR,CAAgB,MAAhB;AACH;;;qCAEmB,Q,EAAU;AAC1B,eAAG,gBAAc,QAAd,CAAH;AACA,oBAAQ,OAAR,CAAgB,YAAhB;AACH;;;8BAEY,U,EAAY;AACrB,oBAAQ,OAAR,CAAgB,aAAhB,GAAgC,UAAhC;AACA,uBAAS,UAAT;AACA,oBAAQ,OAAR,CAAgB,MAAhB;AACH;;;0CAGwB,U,EAAY,G,EAAK;AACtC,gBAAI,eAAe,IAAI,KAAJ,IAAa,GAAhC;;AAEA,gBAAI,MAAM,WAAS,YAAT,CAAV;AACA,gBAAI,aAAgB,UAAhB,UAA+B,GAA/B,mBAAJ;;AAEA,eAAG,GAAH;;AAEA,oBAAQ,OAAR,CAAgB,QAAhB,CAAyB,IAAzB,CAA8B,UAA9B;AACH;;;yCAEuB,U,EAAY,G,EAAK;AACrC,gBAAI,eAAe,IAAI,KAAJ,IAAa,GAAhC;;AAEA,gBAAI,MAAM,WAAS,YAAT,CAAV;AACA,gBAAI,aAAgB,UAAhB,UAA+B,GAA/B,mBAAJ;;AAEA,eAAG,GAAH;;AAEA,oBAAQ,OAAR,CAAgB,QAAhB,CAAyB,IAAzB,CAA8B,UAA9B;AACA,oBAAQ,OAAR,CAAgB,iBAAhB;AACH;;;kCAEgB;AACb,eAAG,sCAAH;AACA,gBAAI,IAAI,QAAQ,OAAhB;;AAEA,cAAE,QAAF,CAAW,OAAX,CAAmB,aAAK;AACpB,yBAAO,CAAP;AACH,aAFD;;AAIA,gBAAI,qBAAJ;AACA,2CAA6B,EAAE,MAA/B;AACA,2CAA6B,MAAM,EAAE,MAAR,CAA7B;AACA,2CAA6B,IAAI,EAAE,MAAN,CAA7B;AACA,iDAAmC,OAAO,EAAE,YAAT,CAAnC,SACA,4CAA0C,IAAI,EAAE,iBAAN,CAD1C;;AAGA,eAAG,cAAH;AACH;;;;;;kBApGgB,Q","file":"reporter.js","sourcesContent":["import style from 'console-style'\nlet { green, yellow, red } = style;\nlet _l = console.log;\n\nexport default class reporter {\n\n    static setExitCode() {\n        let { summary } = process;\n        process.exitCode = summary.failed + summary.inconclusive + summary.notRunnableSuites;\n    }\n\n    static ensureStatsInitialized() {\n        if (process.summary)\n            return;\n        process.summary = {\n            passed: 0,\n            failed: 0,\n            suites: 0,\n            notRunnableSuites: 0,\n            inconclusive: 0,\n            messages: []\n        };\n    }\n\n    static ok(testname) {\n        _l(green(`  ✓ ${testname}`));\n        process.summary.passed++;\n    }\n\n    static warn(message) {\n        _l(yellow(`\\n${message}`));\n    }\n\n    static fail(testname, ...extraArgs) {\n\n        let errorMessage = red(`   ✘ ${testname}`),\n            traceLines = extraArgs.map(line => {\n                return `        ${line}`;\n            })\n            .join('\\n');\n        _l(errorMessage);\n        _l(traceLines);\n\n        let summaryMessage = '';\n        summaryMessage += `\\n${process.summary.lastSuiteName}`;\n        summaryMessage += `\\n${errorMessage}`\n        summaryMessage += `\\n${traceLines}`\n        summaryMessage += `\\n------------`;\n\n        process.summary.messages.push(summaryMessage);\n        process.summary.failed++;\n    }\n\n    static inconclusive(testname) {\n        _l(yellow(`  ! ${testname}`));\n        process.summary.inconclusive++;\n    }\n\n    static suite(suite_name) {\n        process.summary.lastSuiteName = suite_name;\n        _l(`\\n ${suite_name}`);\n        process.summary.suites++;\n    }\n\n\n    static inconclusiveSuite(suite_name, err) {\n        let errorMessage = err.stack || err;\n\n        let msg = red(`  ${errorMessage}`);\n        let summaryMsg = `${suite_name}\\n${msg}\\n------------`;\n\n        _l(msg);\n\n        process.summary.messages.push(summaryMsg);\n    }\n\n    static notRunnableSuite(suite_name, err) {\n        let errorMessage = err.stack || err;\n\n        let msg = red(`  ${errorMessage}`);\n        let summaryMsg = `${suite_name}\\n${msg}\\n------------`;\n\n        _l(msg);\n\n        process.summary.messages.push(summaryMsg);\n        process.summary.notRunnableSuites++;\n    }\n\n    static summary() {\n        _l('\\n========== Summary =============\\n');\n        let s = process.summary;\n\n        s.messages.forEach(m => {\n            _l(` ${m}`);\n        });\n\n        let summaryMessage = `\\n`;\n        summaryMessage += `suites: ${s.suites}, `;\n        summaryMessage += `passed: ${green(s.passed)}, `\n        summaryMessage += `failed: ${red(s.failed)}, `\n        summaryMessage += `inconclusive: ${yellow(s.inconclusive)}, `,\n        summaryMessage += `not runnable suites: ${red(s.notRunnableSuites)}`;\n\n        _l(summaryMessage);\n    }\n\n\n}\n"]}