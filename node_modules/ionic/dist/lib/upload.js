"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
function upload(env, { note, channelTag }) {
    return __awaiter(this, void 0, void 0, function* () {
        let channel;
        const token = yield env.session.getAppUserToken();
        const deploy = new cli_utils_1.DeployClient(token, env.client);
        if (channelTag) {
            env.tasks.next('Retrieving deploy channel');
            channel = yield deploy.getChannel(channelTag);
        }
        const wwwPath = path.join(env.project.directory, 'www');
        const zip = cli_utils_1.createArchive('zip');
        zip.directory(wwwPath, '/');
        zip.finalize();
        env.tasks.next('Requesting snapshot upload');
        const snapshot = yield deploy.requestSnapshotUpload({ note });
        const uploadTask = env.tasks.next('Uploading snapshot');
        yield deploy.uploadSnapshot(snapshot, zip, (loaded, total) => {
            uploadTask.progress(loaded, total);
        });
        env.tasks.end();
        env.log.ok(`Uploaded snapshot ${chalk.bold(snapshot.uuid)}!`);
        if (channel) {
            env.tasks.next(`Deploying to '${channel.tag}' channel`);
            yield deploy.deploy(snapshot.uuid, channel.uuid);
            env.tasks.end();
            env.log.ok(`Deployed snapshot ${chalk.bold(snapshot.uuid)} to channel ${chalk.bold(channel.tag)}!`);
        }
        return snapshot;
    });
}
exports.upload = upload;
