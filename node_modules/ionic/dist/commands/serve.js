"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
const modules_1 = require("../lib/modules");
let ServeCommand = class ServeCommand extends cli_utils_1.Command {
    run(inputs, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.env.hooks.fire('watch:before', { env: this.env });
            const [response] = yield this.env.hooks.fire('command:serve', {
                cmd: this,
                env: this.env,
                inputs,
                options: Object.assign({}, options, { externalIpRequired: options.broadcast })
            });
            if (options.broadcast) {
                this.env.tasks.next(`Broadcasting server information`);
                const appDetails = yield this.env.project.load();
                const message = JSON.stringify({
                    app_name: appDetails.name,
                    app_id: appDetails.app_id,
                    local_address: `${response.protocol}://${response.publicIp}:${response.httpPort}`
                });
                const dgram = modules_1.load('dgram');
                const server = dgram.createSocket('udp4');
                server.on('listening', () => {
                    server.setBroadcast(true);
                    setInterval(() => {
                        try {
                            server.send(message, 41234, '255.255.255.255');
                        }
                        catch (e) {
                            throw e;
                        }
                    }, 3000);
                });
                server.bind();
            }
            this.env.tasks.end();
        });
    }
};
ServeCommand = __decorate([
    cli_utils_1.CommandMetadata({
        name: 'serve',
        type: 'project',
        description: 'Start a local dev server for app dev/testing',
        longDescription: `
Easily spin up a development server which launches in your browser. It watches for changes in your source files and automatically reloads with the updated build.

Try the ${chalk.green('--lab')} option to see multiple platforms at once.
  `,
        exampleCommands: ['-lcs', '--lab -lcs'],
        options: [
            {
                name: 'consolelogs',
                description: 'Print app console logs to Ionic CLI',
                type: Boolean,
                aliases: ['c'],
            },
            {
                name: 'serverlogs',
                description: 'Print dev server logs to Ionic CLI',
                type: Boolean,
                aliases: ['s'],
            },
            {
                name: 'port',
                description: 'Dev server HTTP port',
                default: '8100',
                aliases: ['p'],
            },
            {
                name: 'livereload-port',
                description: 'Live Reload port',
                default: '35729',
                aliases: ['r'],
            },
            {
                name: 'nobrowser',
                description: 'Disable launching a browser',
                type: Boolean,
                aliases: ['b'],
            },
            {
                name: 'nolivereload',
                description: 'Do not start live reload',
                type: Boolean,
                aliases: ['d'],
            },
            {
                name: 'noproxy',
                description: 'Do not add proxies',
                type: Boolean,
                aliases: ['x'],
            },
            {
                name: 'address',
                description: 'Network address for server',
                default: '0.0.0.0',
            },
            {
                name: 'browser',
                description: `Specifies the browser to use (${['safari', 'firefox', 'chrome'].map(b => chalk.green(b)).join(', ')})`,
                aliases: ['w'],
            },
            {
                name: 'browseroption',
                description: 'Specifies a path to open to (/#/tab/dash)',
                aliases: ['o'],
            },
            {
                name: 'lab',
                description: 'Test your apps on multiple platform types in the browser',
                type: Boolean,
                aliases: ['l'],
            },
            {
                name: 'platform',
                description: 'Start serve with a specific platform (ios/android)',
                aliases: ['t'],
            },
        ],
    })
], ServeCommand);
exports.ServeCommand = ServeCommand;
