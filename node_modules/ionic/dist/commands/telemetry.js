"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
let TelemetryCommand = class TelemetryCommand extends cli_utils_1.Command {
    run(inputs, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const config = yield this.env.config.load();
            const [status] = inputs;
            const enableTelemetry = config.cliFlags.telemetry;
            if (typeof status === 'string') {
                config.cliFlags.telemetry = status.toLowerCase() === 'on';
            }
            if (typeof status === 'string' || enableTelemetry !== config.cliFlags.telemetry) {
                this.env.log.ok(`Telemetry: ${chalk.bold(config.cliFlags.telemetry ? 'ON' : 'OFF')}`);
            }
            else {
                this.env.log.msg(`Telemetry: ${chalk.bold(config.cliFlags.telemetry ? 'ON' : 'OFF')}`);
            }
            if (config.cliFlags.telemetry) {
                this.env.log.msg('Thank you for making the CLI better! ❤️');
            }
        });
    }
};
TelemetryCommand = __decorate([
    cli_utils_1.CommandMetadata({
        name: 'telemetry',
        type: 'global',
        description: 'Opt in and out of telemetry',
        inputs: [
            {
                name: 'status',
                description: `${chalk.green('on')} or ${chalk.green('off')}`,
                validators: [cli_utils_1.contains(['on', 'off'], { caseSensitive: false })],
                required: false,
            }
        ],
    })
], TelemetryCommand);
exports.TelemetryCommand = TelemetryCommand;
