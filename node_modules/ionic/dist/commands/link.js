"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
const modules_1 = require("../lib/modules");
const CREATE_NEW_APP_CHOICE = 'createNewApp';
let LinkCommand = class LinkCommand extends cli_utils_1.Command {
    run(inputs, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let [appId] = inputs;
            const config = yield this.env.config.load();
            const project = yield this.env.project.load();
            if (project.app_id) {
                const confirm = yield this.env.prompt({
                    type: 'confirm',
                    name: 'confirm',
                    message: `App ID ${chalk.green(project.app_id)} already exists in project config. Would you like to link a different app?`
                });
                if (!confirm) {
                    this.env.log.ok('Not linking.');
                    return;
                }
            }
            if (appId) {
                if (appId === project.app_id) {
                    return this.env.log.ok(`Already linked with app ${chalk.bold(appId)}.`);
                }
                this.env.tasks.next(`Looking up app ${chalk.bold(appId)}`);
                const token = yield this.env.session.getAppUserToken(appId);
                const req = this.env.client.make('GET', `/apps/${appId}`)
                    .set('Authorization', `Bearer ${token}`)
                    .send();
                const res = yield this.env.client.do(req);
                if (!cli_utils_1.isAppResponse(res)) {
                    throw cli_utils_1.createFatalAPIFormat(req, res);
                }
                this.env.tasks.end();
            }
            else {
                this.env.tasks.next(`Looking up your apps`);
                let apps = [];
                const token = yield this.env.session.getUserToken();
                const paginator = this.env.client.paginate(() => this.env.client.make('GET', '/apps').set('Authorization', `Bearer ${token}`), cli_utils_1.isAppsResponse);
                for (let r of paginator) {
                    const res = yield r;
                    apps = apps.concat(res.data);
                }
                this.env.tasks.end();
                const createAppChoice = {
                    name: 'Create a new app',
                    id: CREATE_NEW_APP_CHOICE,
                };
                const linkedApp = yield this.env.prompt({
                    type: 'list',
                    name: 'linkedApp',
                    message: `Which app would you like to link`,
                    choices: [createAppChoice, ...apps].map((app) => ({
                        name: app.id !== CREATE_NEW_APP_CHOICE ? `${app.name} (${app.id})` : chalk.bold(app.name),
                        value: app.id
                    }))
                });
                appId = linkedApp;
            }
            if (appId === CREATE_NEW_APP_CHOICE) {
                const token = yield this.env.session.getUserToken();
                const opn = modules_1.load('opn');
                opn(`${config.urls.dash}/?user_token=${token}`, { wait: false });
                this.env.log.ok(`Rerun ${chalk.green(`ionic link`)} to link to the new app.`);
            }
            else {
                project.app_id = appId;
                yield this.env.project.save(project);
                this.env.log.ok(`Project linked with app ${chalk.bold(appId)}!`);
            }
        });
    }
};
LinkCommand = __decorate([
    cli_utils_1.CommandMetadata({
        name: 'link',
        type: 'project',
        description: 'Connect your local app to Ionic',
        longDescription: `
If you have an app on ${chalk.bold('https://apps.ionic.io')}, you can link it to your local Ionic project with this command.

Excluding the ${chalk.green('app_id')} argument looks up your apps on ${chalk.bold('https://apps.ionic.io')} and prompts you to select one.

This command simply sets the ${chalk.bold('app_id')} property in ${chalk.bold(cli_utils_1.PROJECT_FILE)} for other commands to read.
  `,
        exampleCommands: ['', 'a1b2c3d4'],
        inputs: [
            {
                name: 'app_id',
                description: `The ID of the app to link (e.g. ${chalk.green('a1b2c3d4')})`,
                required: false,
            }
        ],
    })
], LinkCommand);
exports.LinkCommand = LinkCommand;
