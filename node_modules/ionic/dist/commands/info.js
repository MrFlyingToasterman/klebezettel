"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
let InfoCommand = class InfoCommand extends cli_utils_1.Command {
    run(inputs, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const task = this.env.tasks.next('Gathering environment info');
            const initialValue = [];
            const results = yield this.env.hooks.fire('command:info', { cmd: this, env: this.env, inputs, options });
            const flattenedResults = results.reduce((acc, currentValue) => acc.concat(currentValue), initialValue);
            const globalNpmDetails = flattenedResults.filter((item) => item.type === 'global-packages' || item.type === 'global-npm');
            const localNpmDetails = flattenedResults.filter((item) => item.type === 'local-packages' || item.type === 'local-npm');
            const systemDetails = flattenedResults.filter((item) => item.type === 'system');
            const prettify = (ary) => ary
                .sort((a, b) => cli_utils_1.strcmp(a.name, b.name))
                .map((item) => [item.name, chalk.dim(item.version)]);
            const format = (details) => cli_utils_1.columnar(details, { vsep: ':' }).split('\n').join('\n    ');
            task.end();
            if (!this.env.project.directory) {
                this.env.log.warn('You are not in an Ionic project directory. Project context may be missing.');
            }
            if (globalNpmDetails.length > 0) {
                this.env.log.msg('\n' + chalk.bold('global packages:'));
                this.env.log.msg(`\n    ${format(prettify(globalNpmDetails))}`);
            }
            if (localNpmDetails.length > 0) {
                this.env.log.msg('\n' + chalk.bold('local packages:'));
                this.env.log.msg(`\n    ${format(prettify(localNpmDetails))}`);
            }
            if (systemDetails.length > 0) {
                this.env.log.msg('\n' + chalk.bold('System:'));
                this.env.log.msg(`\n    ${format(prettify(systemDetails))}`);
            }
            this.env.log.nl();
        });
    }
};
InfoCommand = __decorate([
    cli_utils_1.CommandMetadata({
        name: 'info',
        type: 'global',
        description: 'Print system/environment info'
    })
], InfoCommand);
exports.InfoCommand = InfoCommand;
