"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
let PackageListCommand = class PackageListCommand extends cli_utils_1.Command {
    run(inputs, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = yield this.env.session.getAppUserToken();
            const pkg = new cli_utils_1.PackageClient(token, this.env.client);
            this.env.tasks.next('Retrieving package builds');
            const builds = yield pkg.getBuilds({});
            if (builds.length === 0) {
                this.env.tasks.end();
                return this.env.log.warn(`You don't have any builds yet! Run ${chalk.green('ionic package build --help')} to learn how.`);
            }
            const attrs = ['id', 'status', 'platform', 'security_profile_tag', 'mode', 'created', 'completed'];
            const buildsMatrix = builds.map((build) => {
                const formattedBuild = pkg.formatBuildValues(build);
                return attrs.map(attr => formattedBuild[attr] || '');
            });
            const table = cli_utils_1.columnar(buildsMatrix, {
                columnHeaders: attrs.map((attr) => {
                    if (attr === 'created') {
                        return 'started';
                    }
                    else if (attr === 'completed') {
                        return 'finished';
                    }
                    else if (attr === 'security_profile_tag') {
                        return 'profile';
                    }
                    return attr;
                }),
            });
            this.env.tasks.end();
            this.env.log.nl();
            this.env.log.msg(table);
            this.env.log.nl();
            this.env.log.ok(`Showing ${chalk.bold(String(builds.length))} of your latest builds.`);
            this.env.log.nl();
        });
    }
};
PackageListCommand = __decorate([
    cli_utils_1.CommandMetadata({
        name: 'list',
        type: 'project',
        description: 'List your cloud builds',
        longDescription: `
Ionic Package makes it easy to build a native binary of your app in the cloud.

Full documentation can be found here: ${chalk.bold('https://docs.ionic.io/services/package/')}
  `,
        exampleCommands: [''],
    })
], PackageListCommand);
exports.PackageListCommand = PackageListCommand;
