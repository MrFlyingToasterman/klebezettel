"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const minimist = require("minimist");
const cli_utils_1 = require("@ionic/cli-utils");
const index_1 = require("./package/index");
const info_1 = require("./info");
const login_1 = require("./login");
const signup_1 = require("./signup");
const start_1 = require("./start");
const version_1 = require("./version");
const help_1 = require("./help");
const telemetry_1 = require("./telemetry");
const docs_1 = require("./docs");
const ionitron_1 = require("./ionitron");
const serve_1 = require("./serve");
const generate_1 = require("./generate");
const link_1 = require("./link");
const upload_1 = require("./upload");
class IonicNamespace extends cli_utils_1.Namespace {
    constructor() {
        super(...arguments);
        this.root = true;
        this.name = 'ionic';
        this.source = 'ionic';
        this.namespaces = new cli_utils_1.NamespaceMap([
            ['package', () => new index_1.PackageNamespace()],
        ]);
        this.commands = new cli_utils_1.CommandMap([
            ['start', () => new start_1.StartCommand()],
            ['serve', () => new serve_1.ServeCommand()],
            ['help', () => new help_1.HelpCommand()],
            ['info', () => new info_1.InfoCommand()],
            ['login', () => new login_1.LoginCommand()],
            ['signup', () => new signup_1.SignupCommand()],
            ['version', () => new version_1.VersionCommand()],
            ['telemetry', () => new telemetry_1.TelemetryCommand()],
            ['docs', () => new docs_1.DocsCommand()],
            ['ionitron', () => new ionitron_1.IonitronCommand()],
            ['generate', () => new generate_1.GenerateCommand()],
            ['g', 'generate'],
            ['link', () => new link_1.LinkCommand()],
            ['upload', () => new upload_1.UploadCommand()],
        ]);
    }
    runCommand(env) {
        return __awaiter(this, void 0, void 0, function* () {
            let [depth, inputs, cmdOrNamespace] = this.locate(env.argv._);
            if (cmdOrNamespace === this && cli_utils_1.KNOWN_COMMAND_PLUGINS.indexOf(inputs[0]) !== -1) {
                const plugin = yield cli_utils_1.promptToInstallPlugin(env, `${cli_utils_1.ORG_PREFIX}/${cli_utils_1.PLUGIN_PREFIX}${inputs[0]}`, {});
                if (plugin) {
                    cli_utils_1.installPlugin(env, plugin);
                    [depth, inputs, cmdOrNamespace] = env.namespace.locate(inputs);
                }
            }
            if (!cli_utils_1.isCommand(cmdOrNamespace)) {
                return cli_utils_1.showHelp(env, env.argv._);
            }
            const command = cmdOrNamespace;
            command.metadata.minimistOpts = cli_utils_1.metadataToMinimistOptions(command.metadata);
            const options = minimist(env.pargv, command.metadata.minimistOpts);
            inputs = options._.slice(depth);
            env.argv = options;
            command.env = env;
            yield command.validate(inputs);
            if (!env.project.directory && command.metadata.type === 'project') {
                env.log.error(`Sorry! ${chalk.green('ionic ' + command.metadata.fullName)} can only be run in an Ionic project directory.`);
                return;
            }
            try {
                yield command.execute(inputs, options);
            }
            catch (e) {
                const cmdsource = command.metadata.source;
                if (this.source !== cmdsource && !e.fatal && !cli_utils_1.isValidationErrorArray(e)) {
                    env.log.warn(`Error occurred during command execution from a CLI plugin${cmdsource ? ' (' + chalk.green(cmdsource) + ')' : ''}. ${chalk.bold('Your plugins may be out of date.')}`);
                }
                throw e;
            }
        });
    }
}
exports.IonicNamespace = IonicNamespace;
