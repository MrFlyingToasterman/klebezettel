"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
const TYPE_CHOICES = ['component', 'directive', 'page', 'pipe', 'provider', 'tabs'];
let GenerateCommand = class GenerateCommand extends cli_utils_1.Command {
    preRun(inputs, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const [config, project] = yield Promise.all([this.env.config.load(), this.env.project.load()]);
            if (project.type !== 'ionic-angular') {
                throw this.exit('Generators are only supported in Ionic Angular projects.');
            }
            const hooks = this.env.hooks.getRegistered('command:generate');
            if (hooks.length === 0) {
                const plugin = yield cli_utils_1.promptToInstallProjectPlugin(this.env, {
                    message: `To use generators, you need to install ${chalk.green('@ionic/cli-plugin-ionic-angular')}. Install and continue?`,
                });
                if (plugin) {
                    cli_utils_1.installPlugin(this.env, plugin);
                }
                else {
                    return 1;
                }
            }
            if (!inputs[0]) {
                const generatorType = yield this.env.prompt({
                    type: 'list',
                    name: 'generatorType',
                    message: 'What would you like to generate:',
                    choices: TYPE_CHOICES,
                });
                inputs[0] = generatorType;
            }
            if (!inputs[1]) {
                const generatorName = yield this.env.prompt({
                    type: 'input',
                    name: 'generatorName',
                    message: 'What should the name be?',
                    validate: v => cli_utils_1.validators.required(v, 'name')
                });
                inputs[1] = generatorName;
            }
            if (!config.cliFlags.interactive && inputs[0] === 'tabs') {
                this.env.log.error(`Cannot generate tabs in non-interactive mode. Use ${chalk.green('--interactive')} to re-enable prompts.`);
                return 1;
            }
        });
    }
    run(inputs, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const [type, name] = inputs;
            yield this.env.hooks.fire('command:generate', { cmd: this, env: this.env, inputs, options });
            this.env.log.ok(`Generated a ${chalk.bold(type)}${type === 'tabs' ? ' page' : ''} named ${chalk.bold(name)}!`);
        });
    }
};
GenerateCommand = __decorate([
    cli_utils_1.CommandMetadata({
        name: 'generate',
        type: 'project',
        description: `Generate pipes, components, pages, directives, providers, and tabs ${chalk.bold(`(ionic-angular >= 3.0.0)`)}`,
        longDescription: `
Automatically create components for your Ionic app.

The given ${chalk.green('name')} is normalized into an appropriate naming convention. For example, ${chalk.green('ionic generate page neat')} creates a page by the name of ${chalk.green('NeatPage')} in ${chalk.green('src/pages/neat/')}.
  `,
        exampleCommands: ['', ...TYPE_CHOICES, 'component foo', 'page Login', 'pipe MyFilterPipe'],
        inputs: [
            {
                name: 'type',
                description: `The type of generator (e.g. ${TYPE_CHOICES.map(t => chalk.green(t)).join(', ')})`,
            },
            {
                name: 'name',
                description: 'The name of the component being generated',
            }
        ],
    })
], GenerateCommand);
exports.GenerateCommand = GenerateCommand;
