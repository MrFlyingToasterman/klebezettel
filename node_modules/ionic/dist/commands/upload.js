"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
const upload_1 = require("../lib/upload");
let UploadCommand = class UploadCommand extends cli_utils_1.Command {
    resolveNote(input) {
        if (typeof input !== 'string') {
            input = undefined;
        }
        return input;
    }
    resolveChannelTag(input) {
        if (typeof input !== 'string') {
            input = undefined;
        }
        else if (input === '') {
            input = 'dev';
        }
        return input;
    }
    run(inputs, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const note = this.resolveNote(options['note']);
            const channelTag = this.resolveChannelTag(options['deploy']);
            if (!options['nobuild']) {
                yield this.env.hooks.fire('build:before', { env: this.env });
                yield this.env.hooks.fire('command:build', {
                    cmd: this,
                    env: this.env,
                    inputs,
                    options,
                });
                yield this.env.hooks.fire('build:after', { env: this.env });
            }
            yield upload_1.upload(this.env, { note, channelTag });
        });
    }
};
UploadCommand = __decorate([
    cli_utils_1.CommandMetadata({
        name: 'upload',
        type: 'project',
        description: 'Upload a new snapshot of your app',
        longDescription: `
Zips up your local app files and uploads a snapshot to ${chalk.bold('https://apps.ionic.io')}.

From there, you can use Ionic View (${chalk.bold('https://view.ionic.io')}) to easily share your app with your organization and testers around the world.
  `,
        exampleCommands: [''],
        options: [
            {
                name: 'note',
                description: 'Give this snapshot a nice description',
            },
            {
                name: 'deploy',
                description: 'Deploys this snapshot to the given channel',
            },
            {
                name: 'nobuild',
                description: 'Do not invoke a build for this upload',
                type: Boolean,
            },
        ],
    })
], UploadCommand);
exports.UploadCommand = UploadCommand;
